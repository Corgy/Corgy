//
//  testcode.swift
//  Corgy
//
//  Created by buqian zheng on 4/21/18.
//

import Foundation
import Corgy

@available(OSX 10.13, *)
func test () {
    GPUTest.MNIST()
    CPUTest.MNIST()
}

@available(OSX 10.13, *)
enum CPUTest {
    static func MNIST() {
        testMNIST(computeOn: .CPU)
    }
}


@available(OSX 10.13, *)
func testMNIST(computeOn: ComputeOn) {
    timing("\(computeOn):") {
        let network = ModelImporter.loadMNISTCNN("MNIST_CNN", computeOn: computeOn)
        let image: Image
        #if os(iOS)
            image = Image(named: "four")!
        #elseif os(OSX)
            image = Image(named: Image.Name("four"))!
        #endif
        let input = Variable.of(grayScaleImage: image)
        let output = network.forward(input)
        print(output)
    }
}

@available(OSX 10.13, *)
enum GPUTest {
    static func testReLU() {
        let relu = Corgy.ReLU
        let input = Variable(32,16)
        for i in 0..<input.value.count {
            input.value[i] = Float(i)
            if i % 2 == 0 {
                input.value[i] = -input.value[i]
            }
        }
        print("Inplace ReLU: \ninput:\n")
        print(input)
        _ = relu(input)
        print("\noutput:\n")
        print(input)
        print("\n")
    }
    
    static func testNeg() {
        let input = Variable(32,16)
        for i in 0..<input.value.count {
            input.value[i] = Float(i)
        }
        
        let neg2 = Corgy.Neg2()
        print("Neg Not inplace: \ninput:\n")
        print(input)
        print("\noutput:\n")
        print(neg2(input))
        print("\n")
        
        let neg = Corgy.Neg()
        
        print("Inplace Neg: \ninput:\n")
        print(input)
        _ = neg(input)
        print("\noutput:\n")
        print(input)
        print("\n")
    }
    
    static func testPoolMax() {
//        let input = Variable.fromString(input: imageString)
        let input = Variable(1, 1, 32, 16)
        for i in 0..<input.value.count {
            input.value[i] = Float(i)
        }
        let poolMax = Corgy.Pool(poolSize: (2, 2), poolType: .Max)
        print("Max pooling layer: \ninput:\n")
        input.printOneLayer(batch: 0, channel: 0)
        let output = poolMax(input)
        print("\noutput: \n")
        output.printOneLayer(batch: 0, channel: 0)
    }
    
    static func testPoolAvg() {
        let input = Variable(1, 1, 32, 16)
        for i in 0..<input.value.count {
            input.value[i] = Float(i)
        }
        let poolAve = Corgy.Pool(poolSize: (2, 2), poolType: .Average)
        print("Avg pooling layer: \ninput:\n")
        input.printOneLayer(batch: 0, channel: 0)
        print("\noutput: \n")
        poolAve(input).printOneLayer(batch: 0, channel: 0)
        print("\n")
    }
    
    static func testDropout() {
        let input = Variable(1, 1, 32, 16)
        for i in 0..<input.value.count {
            input.value[i] = Float(i)
        }
        let poolAve = Corgy.Dropout(p: 0.9)
        print("Dropout layer: \ninput:\n")
        input.printOneLayer(batch: 0, channel: 0)
        print("\noutput: \n")
        poolAve(input).printOneLayer(batch: 0, channel: 0)
        print("\n")
    }
    
    static func testConv2D() {
        let weight = Variable(1, 2, 2, 2)
        for i in 0..<weight.value.count {
            weight.value[i] = Float(i)
        }
        
        let bias   = Variable(2)
        bias.value = [1, 2]
        
        let conv2d = Corgy.Conv2D(inChannels:  1,
                                  outChannels: 2,
                                  kernelSize:  2,
                                  weight: weight,
                                  bias: bias
        )
        
        let input = Variable(1, 1, 4, 4)
        for i in 0..<input.value.count {
            input.value[i] = Float(i)
        }
        
        let output = conv2d(input)
        
        print(output)
    }
    
    @available(OSX 10.13, *)
    static func testMultiply() {
        let v1 = Variable(4, 4)
        for i in 0..<v1.value.count {
            v1.value[i] = Float(i);
        }
        
        let v2 = Variable(4, 4)
        for i in 0..<v2.value.count {
            v2.value[i] = Float(i);
        }
        
        print(Corgy.matrixMultiply(v1, v2))
    }
    
    static func testVariabel() {
        let v = Variable(3, 3, 3)
        for i in 0..<v.value.count {
            v.value[i] = Float(i)
        }
        
        let x = v[1...1, 1...2, 1...2]
        
        print(x)
    }
    
    static func MNIST() {
        testMNIST(computeOn: .GPU)
    }
}


let imageString = """
1 1 28 28
0.3059  0.2863  0.2824  0.2863  0.2863  0.2980  0.2941  0.3020  0.3020  0.2980  0.3020  0.2902  0.2745  0.2784  0.2706  0.2627  0.2627  0.2627  0.2510  0.2353  0.2275  0.2235  0.2078  0.1922  0.1804  0.1843  0.1882  0.1843
0.3059  0.2902  0.2902  0.2863  0.2941  0.2980  0.2941  0.3020  0.3020  0.2980  0.2941  0.2863  0.2824  0.2863  0.2784  0.2667  0.2667  0.2627  0.2471  0.2392  0.2314  0.2353  0.2196  0.2000  0.1843  0.1843  0.1843  0.1882
0.3098  0.2980  0.2980  0.2941  0.3020  0.3059  0.3020  0.3059  0.2980  0.3137  0.3451  0.3216  0.2863  0.2902  0.2824  0.2784  0.2745  0.2667  0.2471  0.2392  0.2431  0.2275  0.1961  0.1922  0.1882  0.1882  0.1922  0.1961
0.3176  0.3059  0.3020  0.3020  0.3098  0.3059  0.3098  0.3059  0.3020  0.4392  0.6471  0.4863  0.2824  0.2902  0.2824  0.2784  0.2784  0.2706  0.2588  0.2471  0.2392  0.2980  0.3647  0.2863  0.1961  0.1961  0.1922  0.2000
0.3255  0.3098  0.3020  0.3020  0.3098  0.3059  0.3098  0.2902  0.3804  0.6118  0.6706  0.3686  0.2784  0.2902  0.2824  0.2824  0.2824  0.2745  0.2706  0.2549  0.2275  0.4627  0.8078  0.4118  0.1922  0.2039  0.2000  0.2118
0.3255  0.3098  0.3020  0.3059  0.3137  0.3176  0.3020  0.3412  0.5647  0.7020  0.4471  0.2902  0.3020  0.2941  0.2863  0.2824  0.2824  0.2784  0.2667  0.2549  0.2392  0.4941  0.7294  0.3686  0.1961  0.2039  0.2000  0.2000
0.3255  0.3137  0.3020  0.3098  0.3216  0.3137  0.3137  0.4980  0.6980  0.5451  0.3216  0.3098  0.3137  0.2980  0.2863  0.2824  0.2863  0.2745  0.2667  0.2510  0.2510  0.5294  0.6824  0.3216  0.1922  0.2118  0.2000  0.1961
0.3294  0.3137  0.3020  0.3098  0.3255  0.3020  0.4235  0.6706  0.6431  0.3686  0.3098  0.3255  0.3137  0.3020  0.2941  0.2902  0.2863  0.2784  0.2745  0.2510  0.2706  0.5725  0.6000  0.2667  0.1961  0.2078  0.2000  0.2000
0.3294  0.3176  0.3020  0.3137  0.3059  0.3529  0.6000  0.7020  0.4510  0.3059  0.3294  0.3176  0.3059  0.3020  0.2941  0.2863  0.2824  0.2745  0.2706  0.2431  0.2941  0.6000  0.5843  0.2588  0.1882  0.2039  0.1961  0.2000
0.3333  0.3176  0.3020  0.3059  0.3137  0.5020  0.7216  0.5725  0.3294  0.3216  0.3333  0.3216  0.3098  0.3059  0.2941  0.2902  0.2902  0.2745  0.2706  0.2431  0.3255  0.6157  0.5686  0.2588  0.1843  0.2000  0.2000  0.2000
0.3373  0.3176  0.3059  0.2980  0.4235  0.6941  0.6706  0.3725  0.2824  0.3137  0.3098  0.3098  0.3059  0.3020  0.2980  0.2980  0.2941  0.2824  0.2745  0.2471  0.3804  0.6431  0.5412  0.2392  0.1843  0.1961  0.1961  0.2000
0.3373  0.3216  0.2941  0.3529  0.6275  0.7333  0.5725  0.3843  0.3725  0.3529  0.3294  0.3059  0.2941  0.2824  0.2745  0.2745  0.2706  0.2588  0.2471  0.2353  0.4471  0.6627  0.5059  0.2196  0.1804  0.1882  0.1922  0.2118
0.3373  0.3176  0.3098  0.5569  0.8000  0.7490  0.7059  0.7216  0.7176  0.6941  0.6431  0.5804  0.5255  0.4706  0.4275  0.4078  0.3882  0.3647  0.3373  0.3412  0.5373  0.6471  0.5098  0.2196  0.1843  0.1922  0.1882  0.2078
0.3373  0.3137  0.3059  0.4784  0.5843  0.5529  0.5490  0.5608  0.5647  0.5843  0.6039  0.6275  0.6627  0.6863  0.6941  0.7059  0.7098  0.7059  0.7098  0.6824  0.6078  0.6314  0.4353  0.1961  0.1843  0.1843  0.1843  0.1961
0.3373  0.3137  0.3059  0.3098  0.3176  0.3176  0.3176  0.3216  0.3176  0.3137  0.3098  0.3137  0.3216  0.3216  0.3333  0.3529  0.3725  0.4039  0.4235  0.4902  0.6235  0.6275  0.3098  0.1725  0.1882  0.1765  0.1804  0.1922
0.3412  0.3176  0.3137  0.3137  0.3098  0.3176  0.3216  0.3216  0.3176  0.3137  0.3020  0.2980  0.2941  0.2745  0.2667  0.2667  0.2549  0.2471  0.2196  0.3451  0.6392  0.5961  0.2706  0.1725  0.1804  0.1725  0.1686  0.1765
0.3412  0.3176  0.3137  0.3098  0.3176  0.3216  0.3255  0.3216  0.3216  0.3176  0.3059  0.3098  0.3020  0.2863  0.2824  0.2824  0.2745  0.2706  0.2471  0.4039  0.6549  0.5569  0.2392  0.1725  0.1765  0.1686  0.1608  0.1725
0.3412  0.3176  0.3098  0.3059  0.3137  0.3176  0.3176  0.3216  0.3176  0.3098  0.3020  0.2980  0.2902  0.2784  0.2745  0.2745  0.2667  0.2588  0.2392  0.4275  0.6588  0.5176  0.2157  0.1686  0.1608  0.1529  0.1569  0.1647
0.3373  0.3176  0.3098  0.3059  0.3059  0.3137  0.3137  0.3137  0.3098  0.3020  0.2941  0.2941  0.2902  0.2784  0.2745  0.2706  0.2627  0.2471  0.2392  0.4471  0.6471  0.4980  0.2000  0.1647  0.1608  0.1490  0.1490  0.1569
0.3333  0.3176  0.3098  0.3059  0.3059  0.3098  0.3137  0.3137  0.3059  0.2980  0.2902  0.2902  0.2824  0.2745  0.2706  0.2627  0.2588  0.2392  0.2392  0.4667  0.6392  0.4863  0.1961  0.1608  0.1569  0.1451  0.1451  0.1490
0.3294  0.3137  0.3020  0.2980  0.2980  0.3020  0.3059  0.3020  0.2941  0.2902  0.2824  0.2824  0.2745  0.2667  0.2627  0.2588  0.2510  0.2314  0.2392  0.4824  0.6275  0.4745  0.1843  0.1529  0.1451  0.1412  0.1373  0.1412
0.3216  0.3059  0.2941  0.2902  0.2941  0.2980  0.2980  0.2941  0.2902  0.2824  0.2824  0.2784  0.2706  0.2627  0.2588  0.2471  0.2431  0.2196  0.2392  0.4980  0.6510  0.4627  0.1725  0.1490  0.1412  0.1333  0.1294  0.1373
0.3176  0.3020  0.2902  0.2902  0.2902  0.2902  0.2941  0.2863  0.2863  0.2784  0.2745  0.2706  0.2627  0.2549  0.2510  0.2392  0.2314  0.2118  0.2353  0.4706  0.6510  0.4667  0.1686  0.1451  0.1333  0.1255  0.1255  0.1255
0.3176  0.2980  0.2902  0.2863  0.2863  0.2863  0.2863  0.2824  0.2784  0.2706  0.2627  0.2588  0.2549  0.2471  0.2392  0.2275  0.2235  0.2039  0.2196  0.4314  0.6039  0.4902  0.1725  0.1373  0.1255  0.1216  0.1216  0.1176
0.3059  0.2941  0.2863  0.2824  0.2824  0.2824  0.2784  0.2745  0.2706  0.2627  0.2588  0.2510  0.2392  0.2353  0.2235  0.2157  0.2118  0.1961  0.1843  0.3647  0.5647  0.4588  0.1608  0.1294  0.1216  0.1176  0.1137  0.1059
0.3020  0.2902  0.2824  0.2784  0.2745  0.2745  0.2706  0.2667  0.2627  0.2549  0.2510  0.2431  0.2314  0.2275  0.2157  0.2000  0.1961  0.1922  0.1765  0.2157  0.2667  0.2157  0.1373  0.1294  0.1216  0.1098  0.1020  0.0980
0.2980  0.2824  0.2745  0.2706  0.2667  0.2627  0.2627  0.2588  0.2549  0.2510  0.2431  0.2353  0.2235  0.2157  0.2000  0.1843  0.1843  0.1882  0.1804  0.1608  0.1412  0.1333  0.1333  0.1255  0.1137  0.0980  0.0902  0.0941
0.2863  0.2745  0.2667  0.2627  0.2588  0.2549  0.2549  0.2510  0.2471  0.2431  0.2314  0.2235  0.2157  0.2039  0.1882  0.1765  0.1725  0.1765  0.1725  0.1647  0.1569  0.1451  0.1294  0.1176  0.1020  0.0902  0.0824  0.0863
"""
